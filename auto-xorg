#!/bin/bash/env bash

#
# Filename:       auto-xorg
# Description:    Generates Xorg (video output) for the first or last parsed valid non-VFIO video (VGA) device.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

# <params>
  DISPLAY_MANAGER=$( cat /etc/X11/default-display-manager )
  readonly DISPLAY_MANAGER="${DISPLAY_MANAGER##*/}"
  readonly PATH_1="/etc/X11/xorg.conf.d/"
  readonly FILE_1="${PATH_1}10-auto-xorg.conf"

  # <summary>
  # Color coding
  # Reference URL: 'https://www.shellhacks.com/bash-colors'
  # </summary>
  readonly SET_COLOR_GREEN='\033[0;32m'
  readonly SET_COLOR_RED='\033[0;31m'
  readonly SET_COLOR_YELLOW='\033[0;33m'
  readonly RESET_COLOR='\033[0m'

  # <summary>Append output</summary>
  readonly PREFIX_NOTE="${SET_COLOR_YELLOW}Note:${RESET_COLOR}"
  readonly PREFIX_ERROR="${SET_COLOR_YELLOW}An error occurred:${RESET_COLOR}"
  readonly PREFIX_FAIL="${SET_COLOR_RED}Failure:${RESET_COLOR}"
  readonly PREFIX_PASS="${SET_COLOR_GREEN}Success:${RESET_COLOR}"

  # <summary>Permanent Toggles</summary>
  HAS_MATCHED_INTEL_DRIVER=true

  # <summary>File contents</summary>
  declare -a FILE_1_CONTENTS=(
    "#### Generated by 'portellam/auto-Xorg'"
    "# WARNING: Any modifications to this file will be modified by 'auto-Xorg'"
    "# Run lspci to view hardware information."
    "#"
  )

  # <summary>Toggles</summary>
  DO_RESTART_DISPLAY_MANAGER=false
  PARSE_PCI_ORDER_BY_BUS_ID=true
  PREFER_ANY_BRAND=true
  PREFER_AMD=false
  PREFER_INTEL=false
  PREFER_NVIDIA=false
  PREFER_OFF_BRAND=false
  MATCH_PROBLEM_DRIVER=false

  # <summary>Evaluations</summary>
  readonly GET_PCI_ID='lspci -m | grep -Ei "vga|graphics" | cut -d " " -f 1'
  readonly GET_PCI_ID_REVERSE_SORT='lspci -m | grep -Ei "vga|graphics" | cut -d " " -f 1 | sort -r'
# </params>

# <functions>
  function Main
  {
    IsUserSudo

    if ! SetOptions "$@"; then
      print_usage
      exit "${?}"
    fi

    ToggleSortOrderOfDevices
    ExitIfNoVGADevicesFound
    ExitIfPathIsMissing
    ExitIfPathCannotBeOverwritten
    FindFirstDriver
    WriteToFile
    RestartService

    if ! "${DO_RESTART_DISPLAY_MANAGER}"; then
      echo -e "${PREFIX_NOTE} You may restart the active display manager '${DISPLAY_MANAGER}'.\nTo restart, execute 'sudo systemctl restart ${DISPLAY_MANAGER}'."
    fi

    exit 0
  }

  function get_option
  {
    while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
      "-f" | "--first" )
        PARSE_PCI_ORDER_BY_BUS_ID=true ;;

      "-l" | "--last" )
        PARSE_PCI_ORDER_BY_BUS_ID=false
        echo -e "${PREFIX_NOTE} Parsing VGA devices in reverse order." ;;

      "-r" | "--restart-display" )
        DO_RESTART_DISPLAY_MANAGER=true ;;

      "-a" | "--amd" )
        [ "$PREFER_ANY_BRAND" ] && PREFER_AMD=true
        PREFER_ANY_BRAND=false ;;

      "-i" | "--intel" )
        [ "$PREFER_ANY_BRAND" ] && PREFER_INTEL=true
        PREFER_ANY_BRAND=false ;;

      "-n" | "--nvidia" )
        [ "$PREFER_ANY_BRAND" ] && PREFER_NVIDIA=true
        PREFER_ANY_BRAND=false ;;

      "-o" | "--other" )
        [ "$PREFER_ANY_BRAND" ] && PREFER_OFF_BRAND=true
        PREFER_ANY_BRAND=false ;;

      "" )
        ;;

      "-h" | "--help" )
        return 1 ;;

      * )
        echo -e "${PREFIX_ERROR} Invalid input."
        return 1 ;;
    esac; shift; done

    if [[ "$1" == '--' ]]; then
      shift
    fi

    return 0
  }

  function print_usage
  {
    IFS=$'\n'

    local -ar output=(
      "Usage: sudo bash auto-xorg [OPTION]..."
      "  Generates Xorg (video output) for the first or last parsed valid non-VFIO video (VGA) device."
      "    -h, --help\tPrint this help and exit."
      "\n  Update Xorg:"
      "    -r, --restart-display         Restart the display manager immediately."
      "\n  Set device order:"
      "    -f, --first                   Find the first valid VGA device."
      "    -l, --last                    Find the last valid VGA device."
      "\n  Prefer a vendor:"
      "    -a, --amd                     AMD or ATI"
      "    -i, --intel                   Intel"
      "    -n, --nvidia                  NVIDIA"
      "    -o, --other                   Any other brand (past or future)."
      "\n  Example:"
      "    sudo bash auto-xorg -f -a     Find first valid AMD/ATI VGA device."
      "    sudo bash auto-xorg -l -n -r  Find last valid NVIDIA VGA device, then restart the display manager immediately."
    )

    echo -e "${output[*]}"
    unset IFS
    return 0
  }

  function SetOptions
  {
    for option in "$@"; do
      if [[ "${option}" == "" ]]; then
        return 0
      fi

      get_option "${option}" || return 1
    done

    return 0
  }

  function IsUserSudo
  {
    if [[ $( whoami ) != "root" ]]; then
      echo -e "${PREFIX_ERROR} User is not sudo/root."
      exit 1
    fi

    return 0
  }

  function GetPreferredVendor
  {
    case true in
      "$PREFER_AMD" )
        _PREFERRED_VENDOR=$( echo -e "$_VENDOR" | grep -iv 'amd|ati' | grep -iv 'corporation' ) ;;

      "$PREFER_INTEL" )
        _PREFERRED_VENDOR=$( echo -e "$_VENDOR" | grep -i 'intel' ) ;;

      "$PREFER_NVIDIA" )
        _PREFERRED_VENDOR=$( echo -e "$_VENDOR" | grep -i 'nvidia' ) ;;

      "$PREFER_OFF_BRAND" )
        _PREFERRED_VENDOR=$( echo -e "$_VENDOR" | grep -Eiv 'amd|ati|intel|nvidia' ) ;;
    esac

    if [[ "$_PREFERRED_VENDOR" == "" ]]; then
      return 1
    fi

    return 0
  }

  function FindFirstVGADriver
  {
    for _HWID in ${_HWID_LIST[@]}; do
      _DRIVER=$( lspci -ks "$_HWID" | grep -E 'driver' | cut -d ':' -f 2 | cut -d ' ' -f 2 )
      _TYPE=$( lspci -ms "$_HWID" | cut -d '"' -f 2 | tr '[:upper:]' '[:lower:]' )
      _VENDOR=$( lspci -ms "$_HWID" | cut -d '"' -f 4 | tr '[:upper:]' '[:lower:]' )
      _FUNC_ID=$( echo "$_HWID" | cut -d '.' -f 2 )
      _PCI_ID=$( echo "$_HWID" | cut -d '.' -f 1 )
      _PCI_ID+=":$_FUNC_ID"

      if MatchValidVGADeviceWithDriver; then
        MatchDriverAndSetXorgWriteOnly
        return 0
      fi
    done

    return 1
  }

  function MatchValidVGADeviceWithDriver
  {
    if [[ "$_DRIVER" == "" || "$_TYPE" == "" || "$_VENDOR" == "" ]]; then
      echo -e "Found Driver: 'N/A'"
      return 1
    fi


    if ( [[ "$_TYPE" =~ ^"vga" ]] \
      || [[ "$_TYPE" =~ ^"graphics" ]] ) \
      && ! [[ "$_DRIVER" =~ ^"vfio-pci" ]]; then
      local _PREFERRED_VENDOR=""
      MatchVendorAndOverrideDriver

      # <remarks> Print </remarks>
      echo -e "Found Driver: '$_DRIVER'"

      # <remarks> Set evaluation if a preferred driver is given. </remarks>
      if ! "$PREFER_ANY_BRAND"; then
        GetPreferredVendor
        return "$?"
      fi

      return 0
    fi

    return 1
  }

  function MatchDriverAndSetXorgWriteOnly
  {
    case "$_DRIVER" in
      *"nouveau"* )
        MATCH_PROBLEM_DRIVER=true ;;
    esac

    return 0
  }

  function MatchVendorAndOverrideDriver
  {
    case "$_VENDOR" in
      *"intel"* )
        if [[ "$HAS_MATCHED_INTEL_DRIVER" == true ]]; then
          _DRIVER="modesetting"
        else
          echo -e "${PREFIX_NOTE} Should given parsed Intel VGA driver be invalid, replace xorg.conf with an alternate intel driver (example: 'modesetting')."
        fi ;;

      * )
        ;;
    esac

    return 0
  }

  function SetFile
  {
    case "$?" in
      0 )
        FILE_1_CONTENTS+=(
          ""
          "Section    \"Device\""
          "   Identifier  \"Device0\""
          "   Driver    \"$_DRIVER\""
          "   BusID     \"PCI:$_PCI_ID\""
          "EndSection"
        )

        echo -e "$PREFIX_PASS Valid VGA device found."
        ;;

      * )
        FILE_1_CONTENTS+=(
          ""
          "Section    \"Device\""
          "   Identifier  \"Device0\""
          "   Driver    \"driver_name\""
          "   BusID     \"PCI:bus_id:slot_id:function_id\""
          "EndSection"
        )

        echo -e "$PREFIX_FAIL No valid VGA device found."
        ;;
    esac

    IFS=$'\n'
    echo -e "${FILE_1_CONTENTS[*]}" >> "${FILE_1}"
    EXIT_CODE="$?"

    if [[ "${EXIT_CODE}" -ne 0 ]]; then
      echo -e "${PREFIX_ERROR} Failed to write to file '${FILE_1}'."
    fi

    unset IFS
    return "${EXIT_CODE}"
  }

  function FindFirstDriver
  {
    # <remarks> Find first valid VGA driver. </remarks>
    FindFirstVGADriver
    local -i exit_code="$?"

    if [[ "${exit_code}" -ne 0 ]]; then
      PREFER_ANY_BRAND=true
      FindFirstVGADriver
      exit_code="$?"
    fi

    if [[ "${exit_code}" -ne 0 ]]; then
      echo -e "${PREFIX_ERROR} No VGA devices found."
      exit 1
    fi

    return 0
  }

  function ExitIfPathCannotBeOverwritten
  {
    # <remarks> Exit early if existing system file cannot be overwritten. </remarks>
    if [[ -e "${PATH_1}" ]] \
      && ! sudo rm -f "${FILE_1}" &> /dev/null; then
      echo -e "${PREFIX_ERROR} Failed to delete file '${FILE_1}'."
      exit 1
    fi

    return 0
  }

  function ExitIfPathIsMissing
  {
    # <remarks> Exit early if system directory does not exist and cannot be created. </remarks>
    if [[ ! -d "${PATH_1}" ]] \
      && sudo mkdir -p "${PATH_1}"; then
      echo -e "${PREFIX_ERROR} Failed to create directory '${PATH_1}'."
      exit 1
    fi

    return 0
  }

  function ExitIfNoVGADevicesFound
  {
    # <remarks> Exit early if no PCI devices are found (Note: more likely that the command fails, than no PCI devices exist). </remarks>
    if [[ "${#_HWID_LIST[@]}" -eq 0 ]]; then
      echo -e "${PREFIX_ERROR} No PCI devices found."
      exit 1
    fi

    return 0
  }

  function RestartService
  {
    # <remarks> Restart system service automatically or manually. </remarks>
    if "${DO_RESTART_DISPLAY_MANAGER}" \
      && ( ! sudo systemctl enable "${FILE_2}" \
        || ! sudo systemctl restart "${FILE_2}" ); then
      echo -e "${PREFIX_ERROR} Failed to restart system service."
      exit 1
    fi

    return 0
  }

  function ToggleSortOrderOfDevices
  {
    # <remarks> Toggle the sort order of parse of PCI devices. </remarks>
    if "${PARSE_PCI_ORDER_BY_BUS_ID}"; then
      declare -ga _HWID_LIST=( $( eval ${GET_PCI_ID} ) )
    else
      declare -ga _HWID_LIST=( $( eval ${GET_PCI_ID_REVERSE_SORT} ) )
    fi

    return 0
  }

  function WriteToFile
  {
    # <remarks> Write to file if directory exists and driver is valid. </remarks>
    if [[ ! -d "${PATH_1}" ]]; then
      echo -e "${PREFIX_ERROR} Failed to create directory '${PATH_1}'."
      exit 1
    fi

    if ! "${MATCH_PROBLEM_DRIVER}"; then
      SetFile || exit "$?"
    else
      echo -e "${PREFIX_NOTE} Not writing to file given presence of problem driver."
    fi

    return 0
  }
# </functions>

# <code>
  Main "$@"
# </code>