#!/bin/bash/env bash

#
# Filename:       auto-xorg
# Description:    Generates Xorg (video output) for the first or last parsed valid non-VFIO video (VGA) device.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

# <traps>
  trap 'catch_error' SIGINT SIGTERM ERR
  trap 'catch_exit' EXIT
# </traps>

# <params>
  SCRIPT_NAME="$( basename "${0}" )"
  PREFIX_PROMPT="${SCRIPT_NAME}: "
  PREFIX_ERROR="${PREFIX_PROMPT}An error occurred: "

  SAVEIFS="${IFS}"
  IFS=$'\n'

  DISPLAY_MANAGER=$( cat /etc/X11/default-display-manager )
  readonly DISPLAY_MANAGER="${DISPLAY_MANAGER##*/}"
  readonly PATH_1="/etc/X11/xorg.conf.d/"
  readonly FILE_1="${PATH_1}10-auto-xorg.conf"

  # <summary>
  # Color coding
  # Reference URL: 'https://www.shellhacks.com/bash-colors'
  # </summary>
    readonly SET_COLOR_GREEN='\033[0;32m'
    readonly SET_COLOR_RED='\033[0;31m'
    readonly SET_COLOR_YELLOW='\033[0;33m'
    readonly RESET_COLOR='\033[0m'

  # <summary>Append output</summary>
    readonly PREFIX_NOTE="${SET_COLOR_YELLOW}Note:${RESET_COLOR} "
    readonly PREFIX_ERROR="${SET_COLOR_RED}An error occurred:${RESET_COLOR} "
    readonly PREFIX_PASS="${SET_COLOR_GREEN}Success:${RESET_COLOR} "

  # <summary>Permanent Toggles</summary>
    HAS_MATCHED_INTEL_DRIVER=true

  # <summary>File contents</summary>
    declare -a FILE_1_CONTENTS=(
      "#### Generated by 'portellam/auto-Xorg'"
      "# WARNING: Any modifications to this file will be modified by 'auto-Xorg'"
      "# Run lspci to view hardware information."
      "#"
    )

  # <summary>Toggles</summary>
    DO_RESTART_DISPLAY_MANAGER=false
    PARSE_PCI_ORDER_BY_BUS_ID=true
    PREFER_ANY_BRAND=true
    PREFER_AMD=false
    PREFER_INTEL=false
    PREFER_NVIDIA=false
    PREFER_OFF_BRAND=false
    MATCH_PROBLEM_DRIVER=false

  # <summary>Evaluations</summary>
    readonly GET_PCI_ID='lspci -m | grep -Ei "vga|graphics" | cut -d " " -f 1'
    readonly GET_PCI_ID_REVERSE_SORT='lspci -m | grep -Ei "vga|graphics" | cut -d " " -f 1 | sort -r'

  HWID_LIST=( )
# </params>

# <functions>
  function main
  {
    is_user_superuser

    if ! set_options "$@"; then
      print_usage
    fi

    toggle_sort_order_of_devices
    find_any_vga_device
    is_path_found
    is_file_deletable
    find_first_driver
    write_to_file
    restart_service

    print_to_output_log "${PREFIX_PASS}Updated Xorg."

    if ! "${DO_RESTART_DISPLAY_MANAGER}"; then
      echo -e "${PREFIX_NOTE}You may restart the active display manager '${DISPLAY_MANAGER}'.\nTo restart, execute 'sudo systemctl restart ${DISPLAY_MANAGER}'."
    fi

    exit 0
  }

  # <summary>Options logic</summary>
    function get_option
    {
      while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
        "-f" | "--first" )
          PARSE_PCI_ORDER_BY_BUS_ID=true ;;

        "-l" | "--last" )
          PARSE_PCI_ORDER_BY_BUS_ID=false
          print_to_output_log "Parsing VGA devices in reverse order." ;;

        "-r" | "--restart-display" )
          DO_RESTART_DISPLAY_MANAGER=true ;;

        "-a" | "--amd" )
          [ "$PREFER_ANY_BRAND" ] && PREFER_AMD=true
          PREFER_ANY_BRAND=false ;;

        "-i" | "--intel" )
          [ "$PREFER_ANY_BRAND" ] && PREFER_INTEL=true
          PREFER_ANY_BRAND=false ;;

        "-n" | "--nvidia" )
          [ "$PREFER_ANY_BRAND" ] && PREFER_NVIDIA=true
          PREFER_ANY_BRAND=false ;;

        "-o" | "--other" )
          [ "$PREFER_ANY_BRAND" ] && PREFER_OFF_BRAND=true
          PREFER_ANY_BRAND=false ;;

        "" )
          ;;

        "-h" | "--help" )
          return 1 ;;

        * )
          echo -e "${PREFIX_ERROR} Invalid input."
          return 1 ;;
      esac; shift; done

      if [[ "$1" == '--' ]]; then
        shift
      fi
    }

    function print_usage
    {
      local -ar output=(
        "Usage: sudo bash auto-xorg [OPTION]..."
        "  Generates Xorg (video output) for the first or last parsed valid non-VFIO video (VGA) device."
        "    -h, --help\tPrint this help and exit."
        "\n  Update Xorg:"
        "    -r, --restart-display         Restart the display manager immediately."
        "\n  Set device order:"
        "    -f, --first                   Find the first valid VGA device."
        "    -l, --last                    Find the last valid VGA device."
        "\n  Prefer a vendor:"
        "    -a, --amd                     AMD or ATI"
        "    -i, --intel                   Intel"
        "    -n, --nvidia                  NVIDIA"
        "    -o, --other                   Any other brand (past or future)."
        "\n  Example:"
        "    sudo bash auto-xorg -f -a     Find first valid AMD/ATI VGA device."
        "    sudo bash auto-xorg -l -n -r  Find last valid NVIDIA VGA device, then restart the display manager immediately."
      )

      echo -e "${output[*]}"
      exit 0
    }

    function set_options
    {
      for option in "$@"; do
        is_string "${option}" &> /dev/null && return 0
        get_option "${option}" || return 1
      done
    }

  # <summary>Clean-up</summary>
    function reset_ifs
    {
      IFS="${SAVEIFS}"
    }

  # <summary>Data-type validation</summary>
    function is_string
    {
      if [[ "${1}" == "" ]]; then
        return 1
      fi
    }

  # <summary>Handlers</summary>
    function catch_error {
      exit 255
    }

    function catch_exit {
      reset_ifs
      print_to_error_log "Failed to update Xorg."
    }

    function is_user_superuser
    {
      if [[ $( whoami ) != "root" ]]; then
        print_to_error_log "User is not sudo or root."
        return 1
      fi
    }

  # <summary>Loggers</summary>
    function print_to_error_log
    {
      echo -e "${PREFIX_PROMPT}${PREFIX_ERROR}${1}" >&2
    }

    function print_to_output_log
    {
      echo -e "${PREFIX_PROMPT}${1}" >&1
    }

  function find_any_vga_device
  {
    if [[ "${#HWID_LIST[@]}" -eq 0 ]]; then
      print_to_error_log "No PCI devices found."
      exit 1
    fi
  }

  function find_first_driver
  {
    find_first_vga_driver && return 0
    PREFER_ANY_BRAND=true
    find_first_vga_driver && return 0
    print_to_error_log "No VGA devices found."
    exit 1
  }

  function find_first_vga_driver
  {
    for hwid in "${HWID_LIST[@]}"; do
      driver=$( lspci -ks "${hwid}" | grep -E 'driver' | cut -d ':' -f 2 | cut -d ' ' -f 2 )
      type=$( lspci -ms "${hwid}" | cut -d '"' -f 2 | tr '[:upper:]' '[:lower:]' )
      vendor=$( lspci -ms "${hwid}" | cut -d '"' -f 4 | tr '[:upper:]' '[:lower:]' )
      function_id=$( echo "${hwid}" | cut -d '.' -f 2 )
      pci_id=$( echo "${hwid}" | cut -d '.' -f 1 )
      pci_id+=":${function_id}"

      if match_valid_vga_device_with_driver; then
        match_driver_and_set_xorg_write_only "${driver}"
        return 0
      fi
    done

    return 1
  }

  function get_preferred_vendor
  {
    local -n reference="${1}"
    local -r vendor="${2}"

    case true in
      "${PREFER_AMD}" )
        reference=$( echo -e "${vendor}" | grep --ignore-case --invert-match 'amd|ati' | grep --ignore-case --invert-match 'corporation' ) ;;

      "${PREFER_INTEL}" )
        reference=$( echo -e "${vendor}" | grep --ignore-case 'intel' ) ;;

      "${PREFER_NVIDIA}" )
        reference=$( echo -e "${vendor}" | grep --ignore-case 'nvidia' ) ;;

      "${PPREFER_OFF_BRAND}" )
        reference=$( echo -e "${vendor}" | grep --extended-regexp --ignore-case --invert-match 'amd|ati|intel|nvidia' ) ;;
    esac

    if ! is_string "${reference}" &> /dev/null; then
      return 1
    fi
  }

  function is_file_deletable
  {
    # <remarks>Exit early if existing system file cannot be overwritten.</remarks>
    if [[ -e "${PATH_1}" ]] \
      && ! sudo rm --force "${FILE_1}" &> /dev/null; then
      print_to_error_log "Failed to delete file '${FILE_1}'."
      exit 1
    fi
  }

  function is_path_found
  {
    # <remarks>Exit early if system directory does not exist and cannot be created.</remarks>
    if [[ ! -d "${PATH_1}" ]] \
      && sudo mkdir --parents "${PATH_1}"; then
      print_to_error_log "Failed to create directory '${PATH_1}'."
      exit 1
    fi
  }

  function match_driver_and_set_xorg_write_only
  {
    local -r driver="${1}"

    case "${driver}" in
      *"nouveau"* )
        MATCH_PROBLEM_DRIVER=true ;;
    esac
  }

  function match_valid_vga_device_with_driver
  {
    if ! is_string "${driver}" &> /dev/null \
      || ! is_string "${type}" &> /dev/null \
      || ! is_string "${vendor}" &> /dev/null; then
      print_to_output_log "Found Driver: 'N/A'"
      return 1
    fi

    if ( ! [[ "${type}" =~ ^"vga" ]] && ! [[ "${type}" =~ ^"graphics" ]] ) \
      || ! [[ "${driver}" =~ ^"vfio-pci" ]]; then
      return 1
    fi

    local preferred_vendor=""
    match_vendor_and_override_driver "${preferred_vendor}" "driver"
    print_to_output_log "Found Driver: '${driver}'"

    if ! "${PREFER_ANY_BRAND}"; then
      get_preferred_vendor "preferred_vendor" "${vendor}"
      return "${?}"
    fi
  }

  function match_vendor_and_override_driver
  {
    local -r vendor="${1}"
    local -n reference="${2}"

    case "${vendor}" in
      *"intel"* )
        override_intel_vga_driver "${reference}" ;;
    esac
  }

  function override_intel_vga_driver
  {
    local -n reference="${1}"
    local -r override_driver="modesetting"

    if "${HAS_MATCHED_INTEL_DRIVER}"; then
      reference="${override_driver}"
    else
      print_to_output_log "Should given parsed Intel VGA driver be invalid, replace xorg.conf with an alternate intel driver (example: '${override_driver}')."
    fi
  }

  function restart_service
  {
    if "${DO_RESTART_DISPLAY_MANAGER}" \
      && ( ! sudo systemctl enable "${FILE_2}" || ! sudo systemctl restart "${FILE_2}" ); then
      print_to_error_log "Failed to restart system service."
      exit 1
    fi
  }

  function set_file
  {
    case "${?}" in
      0 )
        FILE_1_CONTENTS+=(
          ""
          "Section    \"Device\""
          "   Identifier  \"Device0\""
          "   Driver    \"${driver}\""
          "   BusID     \"PCI:${pci_id}\""
          "EndSection"
        )

        print_to_output_log "Valid VGA device found."
        ;;

      * )
        FILE_1_CONTENTS+=(
          ""
          "Section    \"Device\""
          "   Identifier  \"Device0\""
          "   Driver    \"driver_name\""
          "   BusID     \"PCI:bus_id:slot_id:function_id\""
          "EndSection"
        )

        print_to_error_log "No valid VGA device found."
        ;;
    esac

    if ! echo -e "${FILE_1_CONTENTS[*]}" >> "${FILE_1}"; then
     print_to_error_log "Failed to write to file '${FILE_1}'."
      return 1
    fi
  }

  function toggle_sort_order_of_devices
  {
    if "${PARSE_PCI_ORDER_BY_BUS_ID}"; then
      HWID_LIST=( $( eval "${GET_PCI_ID}" ) )
    else
      HWID_LIST=( $( eval "${GET_PCI_ID_REVERSE_SORT}" ) )
    fi
  }

  function write_to_file
  {
    if [[ ! -d "${PATH_1}" ]]; then
      echo -e "${PREFIX_ERROR} Failed to create directory '${PATH_1}'."
      exit 1
    fi

    if ! "${MATCH_PROBLEM_DRIVER}"; then
      set_file || exit "${?}"
    else
      print_to_output_log "Not writing to file given presence of problem driver."
    fi
  }
# </functions>

# <code>
  main "$@"
# </code>