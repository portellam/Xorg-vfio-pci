#!/bin/bash sh

#
# Filename:         auto-xorg
# Description:      Generates Xorg (video output) for the first or last valid non-VFIO video (VGA) device.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <params>
    declare -gr _PREFIX_ERROR="An error occurred:"
    declare -g _DISPLAY_MANAGER=$( cat /etc/X11/default-display-manager )
    declare -gr _DISPLAY_MANAGER="${_DISPLAY_MANAGER##*/}"
    declare -gr _PATH_1="/etc/X11/xorg.conf.d/"
    declare -gr _FILE_1="${_PATH_1}10-auto-xorg.conf"

    # <remarks> Permanent Toggles </remarks>
        _HAS_MATCHED_INTEL_DRIVER=true

    # <remarks> File contents </remarks>
        declare -ga _FILE_1_CONTENTS=(
            "#### Generated by 'portellam/auto-Xorg'"
            "# WARNING: Any modifications to this file will be modified by 'auto-Xorg'"
            "# Run lspci to view hardware information."
            "#"
        )

    # <remarks> Toggles </remarks>
        declare -g _DO_RESTART_DISPLAY_MANAGER=false
        declare -g _PARSE_PCI_ORDER_BY_BUS_ID=true
        declare -g _PREFER_ANY_BRAND=true
        declare -g _PREFER_AMD=false
        declare -g _PREFER_INTEL=false
        declare -g _PREFER_NVIDIA=false
        declare -g _PREFER_OFF_BRAND=false

    # <remarks> Evaluations </remarks>
        declare -g _GET_PREFERRED_VENDOR=""
        declare -gr _GET_PCI_ID='lspci -m | grep -Ei "vga|graphics" | cut -d " " -f 1'
        declare -gr _GET_PCI_ID_REVERSE_SORT='lspci -m | grep -Ei "vga|graphics" | cut -d " " -f 1 | sort -r'
# </params>

# <code>
    # <summary> Find first valid VGA driver. </summary>
    function FindFirstVGADriver
    {
        for _HWID in ${_HWID_LIST[@]}; do
            _DRIVER=$( lspci -ks "$_HWID" | grep -E 'driver' | cut -d ':' -f 2 | cut -d ' ' -f 2 )
            _TYPE=$( lspci -ms "$_HWID" | cut -d '"' -f 2 | tr '[:upper:]' '[:lower:]' )
            _VENDOR=$( lspci -ms "$_HWID" | cut -d '"' -f 4 | tr '[:upper:]' '[:lower:]' )
            _FUNC_ID=$( echo "$_HWID" | cut -d '.' -f 2 )
            _PCI_ID=$( echo "$_HWID" | cut -d '.' -f 1 )
            _PCI_ID+=":$_FUNC_ID"
            MatchValidVGADeviceWithDriver && return 0
        done

        return 1
    }

    # <summary> Gets the current option </summary>
    function GetOption
    {
        while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
            "-f" | "--first" )
                _PARSE_PCI_ORDER_BY_BUS_ID=true ;;

            "-l" | "--last" )
                _PARSE_PCI_ORDER_BY_BUS_ID=false
                echo -e "Parsing VGA devices in reverse order." ;;

            "-r" | "--restart-display" )
                _DO_RESTART_DISPLAY_MANAGER=true ;;

            "-a" | "--amd" )
                [ "$_PREFER_ANY_BRAND" ] && _PREFER_AMD=true ;;

            "-i" | "--intel" )
                [ "$_PREFER_ANY_BRAND" ] && _PREFER_INTEL=true ;;

            "-n" | "--nvidia" )
                [ "$_PREFER_ANY_BRAND" ] && _PREFER_NVIDIA=true ;;

            "-o" | "--other" )
                [ "$_PREFER_ANY_BRAND" ] && _PREFER_OFF_BRAND=true ;;

            "" )
                ;;

            "-h" | "--help" )
                return 1 ;;

            * )
                echo -e "$_PREFIX_ERROR Invalid input."
                return 1 ;;
        esac; shift; done

        if [[ "$1" == '--' ]]; then
            shift
        fi

        if "$_PREFER_ANY_BRAND"; then
            SetPreferredBrand
        fi

        return 0
    }

    # <summary> Gets the usage. </summary>
    function GetUsage
    {
        IFS=$'\n'

        local readonly _OUTPUT=(
            "Usage: bash auto-xorg [OPTION]"
            "Generates Xorg (video output) for the first or last valid non-VFIO video (VGA) device.\n"
            "\t-f, --first\t\tfind the first valid VGA device"
            "\t-h, --help\t\tPrint this usage statement"
            "\t-l, --last\t\tfind the last valid VGA device"
            "\t-r, --restart-display\trestart the display manager immediately"
            "\n\tPrefer a vendor:\n"
            "\t-a, --amd\t\tAMD or ATI"
            "\t-i, --intel\t\tIntel"
            "\t-n, --nvidia\t\tNVIDIA"
            "\t-o, --other\t\tany other brand (past or future)"
            "\nExample:"
            "\tbash auto-xorg -f -a\tFind first valid AMD/ATI VGA device."
            "\tbash auto-xorg -l -n -r\tFind last valid NVIDIA VGA device, then restart the display manager immediately."
        )

        echo -e "${_OUTPUT[*]}"
        unset IFS
        return 0
    }

    # <summary> Find first or last valid VGA driver, given if parsing in forward or reverse order. </summary>
    function MatchValidVGADeviceWithDriver
    {
        if [[ "$_DRIVER" == "" ]]; then
            echo -e "Found Driver: 'N/A'"
            return 1
        fi

        if ( [[ "$_TYPE" =~ ^"vga" ]] \
            || [[ "$_TYPE" =~ ^"graphics" ]] ) \
            && ! [[ "$_DRIVER" =~ ^"vfio-pci" ]]; then
            local _PREFERRED_VENDOR=""

            # <remarks> Match Intel VGA </remarks>
            if [[ "$_VENDOR" == *"intel"* ]]; then
                if [[ "$_HAS_MATCHED_INTEL_DRIVER" == true ]]; then
                    _DRIVER="modesetting"
                else
                    echo -e "Note: Should given parsed Intel VGA driver be invalid, replace xorg.conf with an alternate intel driver (example: 'modesetting')."
                fi
            fi

            # <remarks> Print </remarks>
            echo -e "Found Driver: '$_DRIVER'"

            # <remarks> Set evaluation if a preferred driver is given. </remarks>
            if [[ ! "$_PREFER_ANY_BRAND" && "$_GET_PREFERRED_VENDOR" != "" ]]; then
                _PREFERRED_VENDOR=$( echo -e "$_VENDOR" | eval "$_SET_PREFERRED_VENDOR" )
            fi

            # <summary> Exit early if a preferred driver is not found. </summary>
            if [[ ! "$_PREFER_ANY_BRAND" && "$_GET_PREFERRED_VENDOR" != "" && "$_PREFERRED_VENDOR" == "" ]]; then
                return 1
            fi

            return 0
        fi

        return 1
    }

    # <summary> Save contents to file. If no device is found, leave comments in place of details. </summary>
    function SetFile
    {
        case "$?" in
            0 )
                _FILE_1_CONTENTS+=(
                    ""
                    "Section        \"Device\""
                    "   Identifier  \"Device0\""
                    "   Driver      \"$_DRIVER\""
                    "   BusID       \"PCI:$_PCI_ID\""
                    "EndSection"
                )

                echo -e "Valid VGA device found."
                ;;

            * )
                _FILE_1_CONTENTS+=(
                    ""
                    "Section        \"Device\""
                    "   Identifier  \"Device0\""
                    "   Driver      \"driver_name\""
                    "   BusID       \"PCI:bus_id:slot_id:function_id\""
                    "EndSection"
                )

                echo -e "$PREFIX_ERROR No valid VGA device found."
                ;;
        esac

        IFS=$'\n'
        echo -e "${_FILE_1_CONTENTS[*]}" >> "$_FILE_1"
        _EXIT_CODE="$?"

        if [[ "$_EXIT_CODE" -ne 0 ]]; then
            echo -e "$_PREFIX_ERROR Failed to write to file '$_FILE_1'."
        fi

        unset IFS
        return "$_EXIT_CODE"
    }

    # <summary> Sets the options. Exit early (Pass) if input is null. Else, exit early (Fail) if input is invalid. </summary>
    function SetOptions
    {
        for VAR_OPTION in "$@"; do
            [ "$VAR_OPTION" == "" ] && return 0
            GetOption "$VAR_OPTION" || return "$?"
        done

        return 0
    }

    # <summary> Sets evaluation given a preferred brand. </summary>
    function SetPreferredBrand
    {
        case true in
            "$_PREFER_AMD" )
                _GET_PREFERRED_VENDOR="grep -iv 'amd|ati' | grep -iv 'corporation'"
                ;;

            "$_PREFER_INTEL" )
                _GET_PREFERRED_VENDOR="grep -i 'intel'"
                ;;

            "$_PREFER_NVIDIA" )
                _GET_PREFERRED_VENDOR="grep -i 'nvidia'"
                ;;

            "$_PREFER_OFF_BRAND" )
                _GET_PREFERRED_VENDOR="grep -Eiv 'amd|ati|intel|nvidia'"
                ;;
        esac

        if [[ "$_GET_PREFERRED_VENDOR" != "" ]]; then
            _PREFER_ANY_BRAND=false
        fi

        return 0
    }

    # <summary> Main code block </summary>
    function Main
    {
        if [[ $( whoami ) != "root" ]]; then
            echo -e "$_PREFIX_ERROR User is not sudo/root."
            return 1
        fi

        if ! SetOptions "$@"; then GetUsage; return "$?"; fi

        # <remarks> Toggle the sort order of parse of PCI devices. </remarks>
        if "$_PARSE_PCI_ORDER_BY_BUS_ID"; then
            declare -ga _HWID_LIST=( $( eval $_GET_PCI_ID ) )
        else
            declare -ga _HWID_LIST=( $( eval $_GET_PCI_ID_REVERSE_SORT ) )
        fi

        # <remarks> Exit early if no PCI devices are found (NOTE: more likely that the command fails, than no PCI devices exist). </remarks>
        if [[ "${#_HWID_LIST[@]}" -eq 0 ]]; then
            echo -e "$_PREFIX_ERROR No PCI devices found."
            return 1
        fi

        # <remarks> Exit early if system directory does not exist and cannot be created. </remarks>
        if [[ ! -d "$_PATH_1" ]] \
            && [ sudo mkdir -p "$_PATH_1" ]; then
            echo -e "$_PREFIX_ERROR Failed to create directory '$_PATH_1'."
            return 1
        fi

        # <remarks> Exit early if existing system file cannot be overwritten. </remarks>
        if [[ -e "$_PATH_1" ]] \
            && ! sudo rm -f "$_FILE_1" &> /dev/null; then
            echo -e "$_PREFIX_ERROR Failed to delete file '$_FILE_1'."
            return 1
        fi

        # <remarks> Find first valid VGA driver. </remarks>
        FindFirstVGADriver
        declare -i _EXIT_CODE="$?"

        if [[ "$_EXIT_CODE" -ne 0 ]] \
            && [[ "$_GET_PREFERRED_VENDOR" != "" ]]; then
            _GET_PREFERRED_VENDOR=""
            FindFirstVGADriver
            _EXIT_CODE="$?"
        fi

        if [[ "$_EXIT_CODE" -ne 0 ]]; then
            echo -e "$_PREFIX_ERROR No VGA devices found."
            return 1
        fi

        # <remarks> Write to file if directory exists and driver is valid. </remarks>
        if [[ ! -d "$_PATH_1" ]]; then
            echo -e "$_PREFIX_ERROR Failed to create directory '$_PATH_1'."
            return 1
        fi

        SetFile || return "$?"

        # <remarks> Restart system service automatically or manually. </remarks>
        if "$_DO_RESTART_DISPLAY_MANAGER" \
            && ( ! [ sudo systemctl enable "$_FILE_2" ] \
            || ! [ sudo systemctl restart "$_FILE_2" ] ); then
            echo -e "$_PREFIX_ERROR Failed to restart system service."
            return 1
        fi

        if ! "$_DO_RESTART_DISPLAY_MANAGER"; then
            echo -e "You may restart the active display manager '${_DISPLAY_MANAGER}'.\nTo restart, execute 'sudo systemctl restart ${_DISPLAY_MANAGER}'."
        fi

        return 0
    }
# </code>

# <remarks> Main </remarks>
# <code>
    Main $@
    exit $?
# </code>