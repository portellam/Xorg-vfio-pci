#!/bin/bash

#
# Author:       Alex Portell <https://github.com/portellam>
# Description:  Generates Xorg (video output) for the first or last valid non-VFIO video (VGA) device.
#

# set IFS #
    SAVEIFS=$IFS   # Save current IFS (Internal Field Separator)
    IFS=$'\n'      # Change IFS to newline char

# parameters #
    str_input1=`echo $1 | tr '[:upper:]' '[:lower:]'`
    declare -a arr_input1=`lspci -k`
    str_outDir1='/etc/X11/xorg.conf.d/'
    str_outFile1=${str_outDir1}'10-auto-xorg.conf'

    if [[ $str_input1 == "y"* && $str_input1 != "" ]]; then
        bool_firstVGA=true
    else
        bool_firstVGA=false
    fi

# clear existing file #
    if [[ -e $str_outFile1 ]]; then
        rm $str_outFile1
    fi

# find external PCI device Index values, Bus ID, and drivers #
    bool_parseVGA=false
    declare -i int_i=0    # reset counter

    # parse list of PCI devices #
        for str_line1 in $arr_input1; do

            # save Info #
            # convert raw string to copy readable by Xorg
            str_thisBusID=${str_line1:0:7}                                                                      # raw VGA Bus ID
            str_thisBusID=${str_thisBusID:1:2}${str_thisBusID:4:3}                                              # ab:cd.e   > b:d.e
            str_thisBusID=`echo $str_thisBusID | cut -d '.' -f 1`":"`echo $str_thisBusID | cut -d '.' -f 2`     # b:d.e     > b:d:e

            # match VGA device #
            if [[ $str_line1 == *"VGA"* ]]; then
                ((int_i++))
                str_thisVGABusID=$str_thisBusID
                echo "$0: Found Bus ID '$str_thisVGABusID'"
                bool_parseVGA=true
            fi

            # save only if driver is found and is not vfio-pci #
            if [[ $bool_parseVGA == true && $str_line1 == *"driver"* && $str_line1 != *"vfio-pci"* ]]; then    # line includes PCI driver
                bool_parseVGA=false
                str_thisVGADriver=`echo $str_line1 | cut -d ':' -f2`
                str_thisVGADriver=${str_thisVGADriver: 1}
                echo "$0: Found driver '$str_thisVGADriver'"

                # exit after first successful parse #
                if [[ $bool_firstVGA == true ]]; then
                    break
                fi
            fi

            str_prevLine1=$str_line1    # save previous line for comparison
        done

# write to file #
    if [[ -e $str_outDir1 ]]; then

        # valid xorg #
        if [[ $str_thisVGADriver != *"vfio-pci"* ]]; then
            declare -a arr_output1=(
"# Generated by 'portellam/Auto-Xorg'
#
# WARNING: Any modifications to this file will be modified by 'Auto-Xorg'
#
# Execute \"lspci -k\" for Bus ID and Driver.
#
\nSection \"Device\"
Identifier     \"Device0\"
Driver         \"$str_thisVGADriver\"
BusID          \"PCI:$str_thisVGABusID\"
EndSection")

            # append file #
            for str_line1 in ${arr_output1[@]}; do echo -e $str_line1 >> $str_outFile1; done

            # # find display manager #
            # str_DM=`cat /etc/X11/default-display-manager`
            # str_DM=${str_DM:9:(${#str_DM}-9)}
            # str_DM=`echo $str_DM | tr '[:upper:]' '[:lower:]'`

            # # restart service #
            # str_input1=`echo $1 | tr '[:upper:]' '[:lower:]'`

            # if [[ $str_input1 == "dm"* && -e $str_DM ]]; then
            #     sudo systemctl enable $str_DM
            #     sudo systemctl restart $str_DM
            # fi

            # if [[ $str_input1 != "dm"* && -e $str_DM ]]; then
            #     echo -e "$0: You may restart the active display manager ($str_DM).\n$0: Execute 'systemctl restart $str_DM'."
            # fi

        # template #
        else
            declare -a arr_output1=(
"# Generated by 'portellam/Auto-Xorg'
#
# WARNING: Any modifications to this file will be modified by 'Auto-Xorg'
#
# Execute 'lspci -k' for Bus ID and Driver.
#
\n#Section \"Device\"
#Identifier     \"Device0\"
#Driver         \"driver_name\"
#BusID          \"PCI:x:x:x\"
#EndSection")

            # append file #
            for str_line1 in ${arr_output1[@]}; do echo -e $str_line1 >> $str_outFile1; done
        fi

# missing files #
    else
        echo -e "Failed. Missing directories/files:"

        if [[ -z $str_outDir1 ]]; then echo -e "\t$str_outDir1"; fi
        if [[ -z $str_outDir1$str_outFile1 ]]; then echo -e "\t$str_outDir1$str_outFile1"; fi
    fi

IFS=$SAVEIFS   # Restore original IFS
exit 0