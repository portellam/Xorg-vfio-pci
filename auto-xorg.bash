#!/bin/bash

#
# Author:       Alex Portell <https://github.com/portellam>
# Description:  Generates Xorg (video output) for the first or last valid non-VFIO video (VGA) device.
#

# set IFS #
    SAVEIFS=$IFS   # Save current IFS (Internal Field Separator)
    IFS=$'\n'      # Change IFS to newline char

# parameters #
    declare -a arr_busID=$(lspci -m | cut -d ' ' -f1)
    declare -a arr_driver=()
    bool_hasLatestIntelDriver=false
    bool_forceNVIDIAOptimus=false
    bool_parseFirstVGA=true
    str_input1=$(echo $1 | tr '[:upper:]' '[:lower:]')
    str_input2=$(echo $1 | tr '[:upper:]' '[:lower:]')
    str_outDir1='/etc/X11/xorg.conf.d/'
    str_outFile1=${str_outDir1}'10-auto-xorg.conf'

# match input vars
    if [[ $str_input2 == "y"* && $str_input2 != "" ]]; then
        bool_forceNVIDIAOptimus=true
    fi

    if [[ $bool_forceNVIDIAOptimus == true ]]; then
        bool_parseFirstVGA=false

    else
        if [[ $str_input1 == "y"* && $str_input1 != "" ]]; then
            bool_parseFirstVGA=true

        else
            bool_parseFirstVGA=false
        fi
    fi

# clear existing file #
    if [[ -e $str_outFile1 ]]; then
        rm $str_outFile1
    fi

# match package (with APT) and match newer Intel driver (should driver not be found or lspci reports the incorrect driver)
    if [[ $(lsb_release -is | tr '[:upper:]' '[:lower:]') == *"debian"* ]]; then
        if [[ -e `apt list --installed xserver-xorg-core` || -e $(apt list --installed xserver-xorg-video-modesetting) ]]; then
            bool_hasLatestIntelDriver=true

        else
            bool_hasLatestIntelDriver=false
        fi
    fi

# parse PCI Bus IDs #
    for str_thisBusID in ${arr_busID}; do
        str_thisVendor=$(lspci -ms $str_thisBusID | cut -d '"' -f4 | tr '[:upper:]' '[:lower:]')
        str_thisDriver=$(lspci -ks $str_thisBusID | grep -E 'driver')

        echo -e "$0: Found Bus ID: '$str_thisBusID'"

        # match valid driver #
        if [[ -e $str_thisDriver || $str_thisDriver != "" ]]; then
            if [[ $str_thisDriver != *"vfio-pci"* ]]; then

                # save newer driver, as it lspci may report the wrong driver ('i915') #
                if [[ $str_thisVendor == "*intel"* && $bool_hasLatestIntelDriver == true ]]; then
                    arr_driver+=("modesetting");

                # save driver #
                else
                    arr_driver+=("$str_thisDriver");
                fi

                echo -e "$0: Found Driver: '$str_thisDriver'"

            # pad out array with null entry #
            else
                arr_driver+=("N/A");
            fi

        # pad out array with null entry #
        else
            arr_driver+=("N/A");
        fi
    done

# parse first or last VGA driver
# i don't have to do this this way
# i can just pull the first valid driver
# but I want to...

# parse forward order #
    if [[ $bool_parseFirstVGA == true ]]; then

        # parameters #
        declare -i int_i=0

        while [[ $int_i -lt ${#arr_busID[@]} ]]; do

            # parameters #
            str_thisBusID=${arr_busID[$int_i]}
            str_thisDriver=${arr_driver[$int_i]}

            while [[ $int_i -ge 0 ]]; do

                if [[ $str_thisDriver != "N/A" ]]; then
                    readonly str_thisBusID
                    readonly str_thisDriver
                    break;
                fi
            done

            ((int_i++))     # increment counter
        done

# parse reverse order #
    else

        # parameters #
        declare -i int_i=(({#arr_busID[@]}--))

        while [[ $int_i -ge 0 ]]; do

            # parameters #
            str_thisBusID=${arr_busID[$int_i]}
            str_thisDriver=${arr_driver[$int_i]}

            # match valid driver, save and exit #
            if [[ $str_thisDriver != "N/A" ]]; then
                readonly str_thisBusID
                readonly str_thisDriver
                break;
            fi

            ((int_i--))     # decrement counter
        done
    fi

# write to file #
    if [[ -e $str_outDir1 ]]; then

        # valid xorg #
        if [[ $str_thisDriver != "" ]]; then
            declare -a arr_output1=(
"# Generated by 'portellam/Auto-Xorg'
#
# WARNING: Any modifications to this file will be modified by 'Auto-Xorg'
#
# Execute \"lspci -k\" for Bus ID and Driver.
#
\nSection \"Device\"
Identifier     \"Device0\"
Driver         \"$str_thisDriver\"
BusID          \"PCI:$str_thisBusID\"
EndSection")

            # append file #
            for str_line1 in ${arr_output1[@]}; do
                echo -e $str_line1 >> $str_outFile1
            done

            # # find display manager #
            # str_DM=`cat /etc/X11/default-display-manager`
            # str_DM=${str_DM:9:(${#str_DM}-9)}
            # str_DM=`echo $str_DM | tr '[:upper:]' '[:lower:]'`

            # # restart service #
            # str_input1=`echo $1 | tr '[:upper:]' '[:lower:]'`

            # if [[ $str_input1 == "dm"* && -e $str_DM ]]; then
            #     sudo systemctl enable $str_DM
            #     sudo systemctl restart $str_DM
            # fi

            # if [[ $str_input1 != "dm"* && -e $str_DM ]]; then
            #     echo -e "$0: You may restart the active display manager ($str_DM).\n$0: Execute 'systemctl restart $str_DM'."
            # fi

        # template #
        else
            declare -a arr_output1=(
"# Generated by 'portellam/Auto-Xorg'
#
# WARNING: Any modifications to this file will be modified by 'Auto-Xorg'
#
# Execute 'lspci -k' for Bus ID and Driver.
#
\n#Section \"Device\"
#Identifier     \"Device0\"
#Driver         \"driver_name\"
#BusID          \"PCI:x:x:x\"
#EndSection")

            # append file #
            for str_line1 in ${arr_output1[@]}; do
                echo -e $str_line1 >> $str_outFile1
            done
        fi

# missing files #
    else
        echo -e "Failed. Missing directories/files:"

        if [[ -z $str_outDir1 ]]; then echo -e "\t$str_outDir1"; fi
        if [[ -z $str_outDir1$str_outFile1 ]]; then echo -e "\t$str_outDir1$str_outFile1"; fi
    fi

IFS=$SAVEIFS   # Restore original IFS
exit 0
