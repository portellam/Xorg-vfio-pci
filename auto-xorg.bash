#!/bin/bash sh

#
# Filename:         auto-xorg
# Description:      Generates Xorg (video output) for the first or last valid non-VFIO video (VGA) device.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source bashlib-all
# </code>

# <code>
    # <summary> Find first or last valid VGA driver, given if parsing in forward or reverse order. </summary>
    # <returns> exit code </returns>
    function FindFirstVGADriver
    {
        for str_thisPCI_ID in "${arr_PCI_ID[@]}"; do

            # <params>
            str_thisDriver=$( lspci -ks $str_thisPCI_ID | grep -E 'driver' | cut -d ':' -f 2 | cut -d ' ' -f 2 )
            str_thisType=$( lspci -ms $str_thisPCI_ID | cut -d '"' -f 2 | tr '[:upper:]' '[:lower:]' )
            str_thisVendor=$( lspci -ms $str_thisPCI_ID | cut -d '"' -f 4 | tr '[:upper:]' '[:lower:]' )
            # str_thisBusID=$( echo $str_thisPCI_ID | cut -d ':' -f 1 )
            # str_thisSlotID=$( echo $str_thisPCI_ID | cut -d ':' -f 2 | cut -d '.' -f 1 )
            str_thisFuncID=$( echo $str_thisPCI_ID | cut -d '.' -f 2 )
            str_thisPCI_ID=$( echo $str_thisPCI_ID | cut -d '.' -f 1 )
            # str_thisPCI_ID=${str_thisBusID}":"${str_thisSlotID}":"${str_thisFuncID}             # <note> rearrange string for Xorg output
            str_thisPCI_ID+=":"${str_thisFuncID}
            # </params>

            echo -e "Found PCI ID: '$str_thisPCI_ID'"

            if MatchValidVGADeviceWithDriver; then
                return 0
            fi
        done

        return 1
    }

    # <summary> Gets the current option </summary>
    # <returns> exit code </returns>
    function GetOption
    {
        while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
            "-y" || "--yes" )
                bool_parse_PCI_in_order_Bus_ID=true
                ;;
            "-n" || "--no" )
                bool_parse_PCI_in_order_Bus_ID=false
                echo -e "${var_prefix_warn} Parsing VGA devices in reverse order."
                ;;
            "-r" || "--restart-display" )
                bool_do_restart_display_manager=true
            ;;
        esac; shift; done

        if [[ "$1" == '--' ]]; then shift; fi

        return 0
    }

    # <summary> ??? </summary>
    # <returns> exit code </returns>
    function GetUsage
    {
        return 0
    }

    # <summary> Find first or last valid VGA driver, given if parsing in forward or reverse order. </summary>
    # <param name="$str_thisDriver"> string: the name of the driver </param>
    # <returns> exit code </returns>
    function MatchValidVGADeviceWithDriver
    {
        if ! IsString $str_thisDriver &> /dev/null; then
            echo -e "Found Driver: 'N/A'"
            return 1
        fi

        if [[ ( $str_thisType == *"vga"* || $str_thisType == *"graphics"* ) && $str_thisDriver != *"vfio-pci"* ]] && ( ! IsString $str_thisDriver &> /dev/null ); then

            # <summary> Match Intel VGA </summary>
            if [[ $str_thisVendor == *"intel"* ]]; then
                if [[ $bool_toggle_match_given_Intel_driver == true ]]; then
                    str_thisDriver="modesetting"
                else
                    echo -e "${var_prefix_warn} Should given parsed Intel VGA driver be invalid, replace xorg.conf with an alternate intel driver (example: 'modesetting')."
                fi
            fi
        fi

        echo -e "Found Driver: '$str_thisDriver'"
        return 0
    }

    # <summary> Set global parameters </summary>
    # <returns> exit code </returns>
    function SetGlobals
    {
        # <params>
        declare -g str_display_manager=$( cat /etc/X11/default-display-manager )
        str_display_manager="${str_display_manager##*/}"
        declare -gr str_dir1="/etc/X11/xorg.conf.d/"
        declare -gr str_file1="10-auto-xorg.conf"

            # <remarks> Permanent Toggles </remarks>
            declare -gr bool_toggle_match_given_Intel_driver=true

            # <remarks> File contents </remarks>
            declare -ar arr_file_disclaimer=(
                "#### Generated by 'portellam/Auto-Xorg'"
                "# WARNING: Any modifications to this file will be modified by 'Auto-Xorg'"
                "# Run lspci to view hardware information."
                "#"
            )

            declare -a arr_file1=(
                "${arr_file_disclaimer[@]}"
            )

            # <remarks> Toggles </remarks>
            declare -g bool_do_restart_display_manager=false
            declare -g bool_parse_PCI_order_by_Bus_ID=false

            # <remarks> Evaluations </remarks>
            declare -gr var_get_PCI_ID='lspci -m | grep -Ei "vga|graphics" | cut -d " " -f 1'
            declare -gr var_get_PCI_ID_reverse_sort='lspci -m | grep -Ei "vga|graphics" | cut -d " " -f 1 | sort -r'
        # </params>

        return 0
    }

    # <summary> ??? </summary>
    # <returns> exit code </returns>
    function SetFile
    {
        case $? in
            0 )
                declare -a arr_file1=(
                    "\nSection\t\"Device\""
                    "\tIdentifier\t\"Device0\""
                    "\tDriver\t\t\"$str_thisDriver\""
                    "\tBusID\t\t\"PCI:$str_thisPCI_ID\""
                    "EndSection"
                )

                echo -e "Valid VGA device found."
                ;;

            * )
                declare -a arr_file1=(
                    "\nSection\t\"Device\""
                    "\tIdentifier\t\"Device0\""
                    "\tDriver\t\t\"driver_name\""
                    "\tBusID\t\t\"PCI:bus_id:slot_id:function_id\""
                    "EndSection"
                )

                echo -e "${var_prefix_warn} No valid VGA device found."
                ;;
        esac

        WriteToFile "arr_file1" $str_file1
        return $?
    }

    # <summary> Sets the options </summary>
    # <param name="$@"> array: the input parameters </param>
    # <returns> exit code </returns>
    function SetOptions
    {
        for var_option in $@; do
            GetOption || break
        done

        return 0
    }

    # <summary> ??? </summary>
    # <returns> exit code </returns>
    function AutoXorg
    {
        # <remarks> ??? </remarks>
        IsSudoUser || return $?
        SetGlobals || return $?
        SetOptions $@ || return $?

        # <remarks> ??? </remarks>
        if $bool_parse_PCI_order_by_Bus_ID; then
            declare -ar arr_PCI_ID=$( $( eval $var_get_PCI_ID ) )
        else
            declare -ar arr_PCI_ID=$( $( eval $var_get_PCI_ID_reverse_sort ) )
        fi

        # <remarks> ??? </remarks>
        if ! IsArray "arr_PCI_ID"; then
            echo -e "${var_prefix_fail} No PCI devices found."
            return 1
        fi

        # <remarks> Exit early if system directory does not exist and cannot be created. </remarks>
        if ! CheckIfDirExists $str_dir1 &> /dev/null; then
            CreateDir $str_dir1 || return $?
        fi

        DeleteFile $str_file1 &> /dev/null || return $?

        # <remarks> Exit early if existing system file cannot be overwritten. </remarks>
        if ! IsFile $str_file1 &> /dev/null; then
            CreateFile $str_file1 || return $?
        fi

        # <remarks> ??? </remarks>
        if ! FindFirstVGADriver; then
            echo -e "${var_prefix_fail} No VGA devices found."
            return 1
        fi

        # <remarks> ??? </remarks>
        IsDir $str_dir1 || return 1
        IsFile $str_file1 || return 1
        IsString $str_thisDriver &> /dev/null
        SetFile || return $?

        # <remarks> Restart system service automatically or manually. </remarks>
        if $bool_do_restart_display_manager; then
            systemctl enable $str_display_manager || return 1
            systemctl restart $str_display_manager || return 1
        else
            echo -e "You may restart the active display manager '$str_display_manager'.\nTo restart, execute ${var_yellow}'sudo systemctl restart $str_display_manager'${var_reset}."
        fi

        return 0
    }
# </code>