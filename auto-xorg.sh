#!/bin/bash

#
# Author:       Alex Portell <https://github.com/portellam>
# Description:  Generates Xorg (video output) for the first valid non-VFIO video (VGA) device.
#

# set IFS #
SAVEIFS=$IFS   # Save current IFS (Internal Field Separator)
IFS=$'\n'      # Change IFS to newline char

# parameters #
readonly str_input1=`echo $1 | tr '[:upper:]' '[:lower:]'`
readonly declare -a arr_input1=`lspci -k`
readonly str_outDir1="/etc/X11/xorg.conf.d/"
readonly str_outFile1="${str_outDir1}10-auto-xorg.conf"

## find external PCI device Index values, Bus ID, and drivers ##
bool_parseVGA=false
declare -i int_index=0  # reset counter

# parse list of PCI devices #
for str_line1 in $arr_input1; do

    # save Info #
    # convert raw string to copy readable by Xorg
    str_thisPCI_busID=(${str_line1:0:7})                                                                             # raw VGA Bus ID
    str_thisPCI_busID=${str_thisPCI_busID:1:2}${str_thisPCI_busID:4:3}                                                 # ab:cd.e   > b:d.e
    str_thisPCI_busID=$(echo $str_thisPCI_busID | cut -d '.' -f 1)":"$(echo $str_thisPCI_busID | cut -d '.' -f 2)      # b:d.e     > b:d:e

    # match VGA device #
    if [[ $str_line1 == *"VGA"* ]]; then
        ((int_index++))
        str_thisVGA_busID=$str_thisPCI_busID
        echo "$0: Found Bus ID '$str_thisVGA_busID'"
        bool_parseVGA=true
    fi

    # save only if driver is found #
    if [[ $bool_parseVGA == true && $str_line1 == *"Kernel driver in use: "* ]]; then   # line includes PCI driver

        declare -i int_offset=${#str_line1}-22
        str_thisVGA_driver=${str_line1:23:$int_offset}                                   # VGA Driver
        echo "$0: Found driver '$str_thisVGA_driver'"
        
        # save only if not vfio-pci #
        if [[ $str_thisVGA_driver != *"vfio-pci"* ]]; then break; fi

        bool_parseVGA=false
    fi

    str_prevLine1=$str_line1    # save previous line for comparison
done

# write to file #
if [[ -e $str_outFile1 && -e $str_outDir1 ]]; then

    # valid xorg #
    if [[ -e $str_thisVGA_busID && -e $str_thisVGA_driver ]]
        declare -a arr_output1=(
"# Generated by 'portellam/Auto-Xorg'
#
# Execute \"lspci -k\" for Bus ID and Driver.
#
\n
#Section \"Device\"
#Identifier     \"Device0\"
#Driver         \"$str_thisVGA_driver\"
#BusID          \"PCI:$str_thisPCI_busID\"
#EndSection")

        # append file #
        for str_line1 in $arr_output1; do echo -e $str_line1 >> ${str_outDir1}${str_outFile1}; done

        # find display manager #
        str_DM=`cat /etc/X11/default-display-manager`
        str_DM=${str_DM:9:(${#str_DM}-9)}
        str_DM=`echo $str_DM | tr '[:upper:]' '[:lower:]'`

        # restart service #
        str_input1=`echo $1 | tr '[:upper:]' '[:lower:]'`

        if [[ $str_input1 == "dm"* && -e $str_DM ]]; then
            sudo systemctl enable $str_DM
            sudo systemctl restart $str_DM
        fi

        if [[ $str_input1 != "dm"* && -e $str_DM ]]; then
            echo -e "$0: You may restart the active display manager ($str_DM).\n$0: Execute 'systemctl restart $str_DM'."
        fi

    # template #
    else
        declare -a arr_output1=(
"# Generated by 'portellam/Auto-Xorg'
#
# Execute \"lspci -k\" for Bus ID and Driver.
#
\n
#Section \"Device\"
#Identifier     \"Device0\"
#Driver         \"driver_name\"
#BusID          \"PCI:x:x:x\"
#EndSection")

        # append file #
        for str_line1 in $arr_output1; do echo -e $str_line1 >> ${str_outDir1}${str_outFile1}; done
    fi

# missing files #
else
    echo -e "Failed. Missing directories/files:"
    
    if [[ -z $str_outDir1 ]]; then echo -e "\t$str_outDir1"; fi
    if [[ -z $str_outFile1 ]]; then echo -e "\t$str_outFile1"; fi
fi

IFS=$SAVEIFS   # Restore original IFS
exit 0